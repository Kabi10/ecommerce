// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      Product[]
}

model Account {
  id                String   @id @default(cuid())
  userId           String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String?  @db.Text
  access_token     String?  @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?  @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Product Related Models
model Product {
  id          String      @id @default(cuid())
  name        String
  description String      @db.Text
  price       Decimal     @db.Decimal(10, 2)
  images      String[]
  stock       Int         @default(0)
  sku         String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  reviews     Review[]
  wishedBy    User[]
  tags        Tag[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  image       String?
  products    Product[]
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

// Order Related Models
model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  orderItems    OrderItem[]
  shippingAddress Address   @relation(fields: [addressId], references: [id])
  addressId    String
  payment      Payment?
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  provider      String
  paymentId     String?       // External payment ID (e.g., Stripe)
  stripeSessionId String?     @unique // Stripe Checkout Session ID
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Additional Models
model Address {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  type        AddressType @default(SHIPPING)
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean   @default(false)
  orders      Order[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?  @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Enums
enum Role {
  USER
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}
